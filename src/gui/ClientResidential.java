/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;
import javax.swing.*;
import javax.swing.JOptionPane;
import queries.Client;
import queries.UserState;
import queries.SharedData;
import java.time.LocalDate;
import java.util.List;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Rica Mae
 */
public class ClientResidential extends javax.swing.JFrame {
    Client client = new Client();
    private static String meterType = "";
    private boolean isMeterRunning = false; 
    private Timer timer;  
    private int meterID = SharedData.meterID; 

    private int loggedInUserID = UserState.verifiedID;
  
 
    public ClientResidential() {
        if (!UserState.isVerified) {
            JOptionPane.showMessageDialog(this, "You must log in first!", "Login Required", JOptionPane.WARNING_MESSAGE);
            dispose();
            return;
        }

        meterType = client.getMeterType(SharedData.clientID);
        meterID = client.getMeterID(SharedData.clientID);
        
        initComponents();
        loadMeterReadings(loggedInUserID);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        sidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutClient = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        ResidentialPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        switchButton = new javax.swing.JToggleButton();
        residentialUsage = new javax.swing.JLabel();
        residentialBill = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        payButton = new javax.swing.JButton();
        paymentField = new javax.swing.JTextField();
        paymentMethod = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateTodayLabel = new javax.swing.JLabel();
        currentReadingLabel = new javax.swing.JLabel();
        previousReadingLabel = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        history = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sidePanel.setBackground(new java.awt.Color(0, 153, 153));
        sidePanel.setForeground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel1.setText("<html>       CLIENT \nDASHBOARD");
        jLabel1.setToolTipText("");

        logoutClient.setText("LOG OUT");
        logoutClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(logoutClient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutClient, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        tabbedPane.setBackground(new java.awt.Color(102, 102, 102));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        ResidentialPanel.setBackground(new java.awt.Color(0, 204, 204));

        welcomeLabel.setBackground(new java.awt.Color(204, 204, 204));
        welcomeLabel.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLabel.setText("WELCOME ");

        switchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        switchButton.setText("METER SWITCH");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        residentialUsage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        residentialUsage.setForeground(new java.awt.Color(0, 0, 0));
        residentialUsage.setText("METER USAGE");

        residentialBill.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        residentialBill.setForeground(new java.awt.Color(0, 0, 0));
        residentialBill.setText("VIEW BILL");

        payButton.setText("PAY BILL");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        paymentField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentFieldActionPerformed(evt);
            }
        });

        paymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Gcash", "Paymaya" }));
        paymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentMethodActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("INPUT PAYMENT");

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("SELECT PAYMENT METHOD");

        dateTodayLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateTodayLabel.setForeground(new java.awt.Color(0, 0, 0));
        dateTodayLabel.setText("Date Today");

        currentReadingLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentReadingLabel.setForeground(new java.awt.Color(0, 0, 0));
        currentReadingLabel.setText("Current Reading");

        previousReadingLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        previousReadingLabel.setForeground(new java.awt.Color(0, 0, 0));
        previousReadingLabel.setText("Previous Reading");

        refresh.setText("REFRESH BILL");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ResidentialPanelLayout = new javax.swing.GroupLayout(ResidentialPanel);
        ResidentialPanel.setLayout(ResidentialPanelLayout);
        ResidentialPanelLayout.setHorizontalGroup(
            ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResidentialPanelLayout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                        .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(previousReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(residentialBill, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(refresh)))
                                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                        .addGap(84, 84, 84)
                                        .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(paymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                                        .addGap(154, 154, 154)
                                        .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(residentialUsage, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        ResidentialPanelLayout.setVerticalGroup(
            ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResidentialPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(residentialUsage)
                    .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previousReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(currentReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(refresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResidentialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ResidentialPanelLayout.createSequentialGroup()
                        .addComponent(paymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(residentialBill, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        tabbedPane.addTab("RESIDENTIAL", ResidentialPanel);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"
            }
        ));
        jScrollPane1.setViewportView(history);

        jScrollPane2.setViewportView(jScrollPane1);

        jLabel2.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("PAYMENT HISTORY");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );

        tabbedPane.addTab("PAYMENT HISTORY", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabbedPane)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        int clientID = SharedData.clientID; 
        String clientName = client.getClientName(clientID);
        
        welcomeLabel.setText("Welcome, " + clientName + "!");
        
        String billDetails = client.loadBillDetails(clientID);
        
        residentialBill.setText(billDetails);
        displayPaymentHistory();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void logoutClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutClientActionPerformed
        SharedData.clientID = 0;
        UserState.verifiedID = -1;
        UserState.isVerified = false;
        
        ClientSignIn clientsn = new ClientSignIn();
            clientsn.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_logoutClientActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        // TODO add your handling code here:
        if (!isMeterRunning) {
            startMeter();
        } else {
            stopMeter();
        }
    }//GEN-LAST:event_switchButtonActionPerformed

    private void paymentFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentFieldActionPerformed
        // TODO add your handling code here:
        validatePaymentInput();
    }//GEN-LAST:event_paymentFieldActionPerformed

    private void paymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentMethodActionPerformed
        // TODO add your handling code here:
        validatePaymentInput();
    }//GEN-LAST:event_paymentMethodActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
        int clientID = SharedData.clientID; 
        String clientName = client.getClientName(clientID);
        processPayment();
        String billDetails = client.loadBillDetails(clientID);
        residentialBill.setText(billDetails);
    }//GEN-LAST:event_payButtonActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        int clientID = SharedData.clientID; 
        String billDetails = client.loadBillDetails(clientID);
        residentialBill.setText(billDetails);
    }//GEN-LAST:event_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void disableOtherTabsExcept(int indexToEnable) {
        for (int i = 0; i < tabbedPane.getTabCount(); i++) {
            tabbedPane.setEnabledAt(i, i == indexToEnable);
        }
    }
    
    public void loadMeterReadings(int clientID) {
        double[] readings = client.getMeterReadings(clientID);
        dateTodayLabel.setText("Date Today: " + LocalDate.now().toString());
        previousReadingLabel.setText("Previous Reading: " + readings[0]);
        currentReadingLabel.setText("Current Reading: " + readings[1]);
    }

    private void startMeter() {
        isMeterRunning = true;
        switchButton.setText("Stop Meter");

        // Assuming meterID is fetched or assigned earlier in the code
        meterID = client.getMeterID(loggedInUserID);

        timer = new Timer(1000, event -> {
            double[] readings = client.getMeterReadings(meterID);
            readings[1] += 0.1; // Increment by 0.1 for simulation
            client.updateCurrentReading(meterID, readings[1]);

            currentReadingLabel.setText("Current Reading: " + readings[1]);
        });
        timer.start();
    }

    private void stopMeter() {
        isMeterRunning = false;
        switchButton.setText("Start Meter");
        if (timer != null) {
            timer.stop();
        }
    }
    
private void processPayment() {
    String paymentText = paymentField.getText().trim();
    String selectedMethod = (String) paymentMethod.getSelectedItem();
    double paymentAmount;

    try {
        paymentAmount = Double.parseDouble(paymentText); 
        
        int clientID = SharedData.clientID;
        double amountDue = client.getAmountDue(clientID);
        if (client.hasOutstandingBill(clientID)) {            
            if (client.isPaymentSufficient(clientID, paymentAmount)) {
                double meterUsed = client.getMeterUsed(meterID); 
                client.insertPaymentIntoHistory(clientID, meterID, amountDue, selectedMethod, meterUsed);
                client.removeBill(clientID);

                StringBuilder receipt = new StringBuilder();
                receipt.append("Receipt\n");
                receipt.append("Client ID: ").append(clientID).append("\n");
                receipt.append("Meter ID: ").append(meterID).append("\n");
                receipt.append("Payment Method: ").append(selectedMethod).append("\n");
                receipt.append("Amount Due: ").append(amountDue).append("\n");
                receipt.append("Payment Amount: ").append(paymentAmount).append("\n");

                if ("Cash".equalsIgnoreCase(selectedMethod)) {
                    double change = paymentAmount - amountDue;
                    receipt.append("Change: ").append(change).append("\n");
                }

                JOptionPane.showMessageDialog(this, receipt.toString(), "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);

                paymentField.setText("");
                paymentMethod.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(this, "Payment amount is insufficient.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No outstanding bill to pay.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid payment amount.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    private void validatePaymentInput() {
        String paymentText = paymentField.getText().trim();
        String selectedMethod = (String) paymentMethod.getSelectedItem();
        payButton.setEnabled(!paymentText.isEmpty() && !selectedMethod.equals("Select Payment Method"));
    }
    
    private void displayPaymentHistory() {
        int clientID = SharedData.clientID;
        List<Object[]> paymentHistoryList = client.getPaymentHistory(clientID);

        // Column names for the table
        String[] columnNames = {"Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"};

        // Convert List<Object[]> to 2D array for the table
        Object[][] data = new Object[paymentHistoryList.size()][6];

        for (int i = 0; i < paymentHistoryList.size(); i++) {
            data[i] = paymentHistoryList.get(i);  // Directly assign each row's data
        }

        // Set the table model with data and column names
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        history.setModel(model);
    }



    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // Make sure the UserState is verified before proceeding to the ClientDashboard
                if (UserState.isVerified) {
                    new ClientResidential().setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Please log in first.", "Login Required", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ResidentialPanel;
    private javax.swing.JLabel currentReadingLabel;
    private javax.swing.JLabel dateTodayLabel;
    private javax.swing.JTable history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logoutClient;
    private javax.swing.JButton payButton;
    private javax.swing.JTextField paymentField;
    private javax.swing.JComboBox<String> paymentMethod;
    private javax.swing.JLabel previousReadingLabel;
    private javax.swing.JButton refresh;
    protected javax.swing.JLabel residentialBill;
    private javax.swing.JLabel residentialUsage;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JToggleButton switchButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
