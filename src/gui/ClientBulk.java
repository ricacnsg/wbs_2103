/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import javax.swing.*;
import javax.swing.JOptionPane;
import queries.Client;
import queries.UserState;
import queries.SharedData;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Rica Mae
 */
public class ClientBulk extends javax.swing.JFrame {
    Client client = new Client();
    private static String meterType = "";
    private boolean isMeterRunning = false; 
    private Timer timer;  
    private int meterID;
    private DefaultListModel<String> meterList;
    private int submeterID;
    private Map<Integer, Timer> submeterTimers = new HashMap<>();
    private Map<Integer, Boolean> submeterStates = new HashMap<>();


    /**
     * Creates new form ClientBulk
     */
    public ClientBulk() {
        if (!UserState.isVerified) {
            JOptionPane.showMessageDialog(this, "You must log in first!", "Login Required", JOptionPane.WARNING_MESSAGE);
            this.dispose();
            return;
        }
        
        submeterID = 0;
        meterType = client.getMeterType(SharedData.clientID);
        meterID = client.getMeterID(SharedData.clientID);
        
        meterList = new DefaultListModel<>();
        loadMeterList();
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        BulkPane = new javax.swing.JPanel();
        welcomeBulk = new javax.swing.JLabel();
        submeterNameField = new javax.swing.JTextField();
        addSubmeter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateBulk = new javax.swing.JLabel();
        currentSub = new javax.swing.JLabel();
        switchCom = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        submetername = new javax.swing.JLabel();
        scrollList = new javax.swing.JScrollPane();
        scrollPane = new javax.swing.JScrollPane();
        submeterList = new javax.swing.JList<>();
        mainMeterLabel = new javax.swing.JLabel();
        prevMain = new javax.swing.JLabel();
        currentMain = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        paymentField = new javax.swing.JTextField();
        paymethodBulk = new javax.swing.JComboBox<>();
        paybuttonBulk = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        billBulk = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        history = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(901, 597));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        BulkPane.setBackground(new java.awt.Color(0, 204, 204));

        welcomeBulk.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        welcomeBulk.setForeground(new java.awt.Color(255, 255, 255));
        welcomeBulk.setText("WELCOME");

        addSubmeter.setText("ADD METER");
        addSubmeter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubmeterActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Submeter Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("METER USAGE");

        dateBulk.setText("Date Today: ");

        currentSub.setText("Current Reading:");

        switchCom.setText("Start Meter");
        switchCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchComActionPerformed(evt);
            }
        });

        submetername.setText("Submeter Name:");

        submeterList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        submeterList.setModel(meterList);
        submeterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                submeterListValueChanged(evt);
            }
        });
        scrollPane.setViewportView(submeterList);

        scrollList.setViewportView(scrollPane);

        mainMeterLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mainMeterLabel.setText("Main Meter");

        prevMain.setText("Previous Reading:");

        currentMain.setText("Current Reading:");

        jLabel4.setText("INPUT PAYMENT");

        jLabel5.setText("PAYMENT METHOD");

        paymentField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentFieldActionPerformed(evt);
            }
        });

        paymethodBulk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Gcash", "Paymaya" }));

        paybuttonBulk.setText("PAY BILL");
        paybuttonBulk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paybuttonBulkActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        billBulk.setText("<html>VIEW BILL  ");
        billBulk.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(billBulk);

        javax.swing.GroupLayout BulkPaneLayout = new javax.swing.GroupLayout(BulkPane);
        BulkPane.setLayout(BulkPaneLayout);
        BulkPaneLayout.setHorizontalGroup(
            BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BulkPaneLayout.createSequentialGroup()
                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BulkPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BulkPaneLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BulkPaneLayout.createSequentialGroup()
                                        .addComponent(switchCom)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BulkPaneLayout.createSequentialGroup()
                                        .addGap(0, 2, Short.MAX_VALUE)
                                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(currentMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(prevMain, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                                                .addGap(53, 53, 53)
                                                .addComponent(currentSub, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                                .addComponent(mainMeterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(submetername, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)))))
                                .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BulkPaneLayout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(addSubmeter)
                                        .addGap(26, 26, 26))
                                    .addGroup(BulkPaneLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(submeterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BulkPaneLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(BulkPaneLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BulkPaneLayout.createSequentialGroup()
                                        .addGap(151, 151, 151)
                                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(BulkPaneLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(paybuttonBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(131, 131, 131))
                                    .addGroup(BulkPaneLayout.createSequentialGroup()
                                        .addGap(169, 169, 169)
                                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(paymethodBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(paymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addGap(24, 24, 24))
        );
        BulkPaneLayout.setVerticalGroup(
            BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BulkPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BulkPaneLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submeterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addSubmeter, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BulkPaneLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BulkPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dateBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submetername, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainMeterLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prevMain)
                            .addComponent(currentSub, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentMain)
                        .addGap(19, 19, 19)
                        .addComponent(switchCom)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(BulkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BulkPaneLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymethodBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(paybuttonBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        switchCom.setEnabled(false);

        tabbedPane.addTab("BULK", BulkPane);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel6.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel6.setText("PAYMENT HISTORY");

        history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"
            }
        ));
        jScrollPane4.setViewportView(history);

        jScrollPane2.setViewportView(jScrollPane4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        tabbedPane.addTab("PAYMENT HISTORY", jPanel2);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel1.setText("CLIENT DASHBOARD");

        logoutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logoutButton.setText("LOG OUT");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSubmeterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubmeterActionPerformed
        String meterName = submeterNameField.getText().trim();
        if (meterName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a meter name.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
                addNewMeter(meterName); 
                submeterNameField.setText(""); 
            }

        loadMeterList();
    }//GEN-LAST:event_addSubmeterActionPerformed

    private void switchComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchComActionPerformed
        if (submeterList.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "Please select a submeter first!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedSubmeter = submeterList.getSelectedValue();

        int selectedSubmeterID = client.getSubmeterIDByName(meterID, selectedSubmeter);

        if (selectedSubmeterID <= 0) {
            JOptionPane.showMessageDialog(this, "Error retrieving submeter ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (submeterTimers.containsKey(selectedSubmeterID)) { 
            stopSubmeter(selectedSubmeterID);
            switchCom.setText("Start Submeter");
            JOptionPane.showMessageDialog(this, "Submeter stopped!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            startSubmeter(selectedSubmeterID);
            switchCom.setText("Stop Submeter");
            JOptionPane.showMessageDialog(this, "Submeter started!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_switchComActionPerformed

    private void submeterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_submeterListValueChanged
        if (!evt.getValueIsAdjusting()) { 
            String selectedSubmeterName = submeterList.getSelectedValue(); 
            if (selectedSubmeterName != null) {
                int submeterID = client.getSubmeterIDByName(meterID, selectedSubmeterName); // Fetch submeter ID using clientID and submeter name

                if (submeterID > 0) { 
                    double[] readings = client.getSubmeterReadings(submeterID);

                    submetername.setText("Submeter Name: " + selectedSubmeterName); 
                  //  prevSub.setText("Previous Reading: " + readings[0]); 
                    currentSub.setText("Current Reading: " + readings[1]); 
                    
                    int clientID = SharedData.clientID;
                    String billDetails = client.loadBulkBillDetails(clientID, meterID);
                    billBulk.setText("<html>" + billDetails + "</html>"); // Ensure HTML tags are used properly

                    if (submeterTimers.containsKey(submeterID)) {
                        switchCom.setText("Stop Submeter");
                    } else {
                        switchCom.setText("Start Submeter");
                    }
                    switchCom.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Submeter ID not found for the selected submeter.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_submeterListValueChanged

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        int clientID = SharedData.clientID;
        String clientName = client.getClientName(clientID);

        welcomeBulk.setText("Welcome, " + clientName + "!");
        loadMeterReadings(meterID);
        displayPaymentHistory();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        SharedData.clientID = 0;
        UserState.verifiedID = -1;
        UserState.isVerified = false;

        ClientSignIn clientsn = new ClientSignIn();
        clientsn.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void paymentFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentFieldActionPerformed

    private void paybuttonBulkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paybuttonBulkActionPerformed
        // TODO add your handling code here:
 try {
        // Fetch payment details from the UI components
        double paymentAmount = Double.parseDouble(paymentField.getText()); // Replace with your payment field
        String paymentMethod = (String) paymethodBulk.getSelectedItem(); // Replace with your combo box

        int clientID = SharedData.clientID;
        double amountDue = client.getAmountDue(clientID);

        // Validate payment amount
        if (paymentAmount < amountDue) {
            throw new IllegalArgumentException("Payment amount is less than the amount due.");
        }

        // Call the processPayment method
        client.processPayment(clientID, meterID, amountDue, paymentMethod);

        // Generate receipt
        String receipt = generateReceipt(clientID, meterID, amountDue, paymentAmount, paymentMethod);

        // Display receipt
        JOptionPane.showMessageDialog(null, receipt, "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);

        // Update the UI after payment
        JOptionPane.showMessageDialog(null, "Payment processed successfully!", "Payment", JOptionPane.INFORMATION_MESSAGE);

        // Optionally clear the fields or update the displayed bill
        billBulk.setText("No outstanding bill."); // Replace with your label or logic to refresh the bill
        paymentField.setText(""); // Clear the payment field
        paymethodBulk.setSelectedIndex(0); // Reset the combo box

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid input! Please enter valid numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (IllegalArgumentException ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage(), "Payment Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_paybuttonBulkActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private String generateReceipt(int clientID, int meterID, double amountDue, double paymentAmount, String paymentMethod) {
    StringBuilder receipt = new StringBuilder();

    // Calculate change (sukli) if payment method is cash
    double change = 0.0;
    if ("Cash".equalsIgnoreCase(paymentMethod)) {
        if (paymentAmount >= amountDue) {
            change = paymentAmount - amountDue;
        } else {
            throw new IllegalArgumentException("Insufficient payment amount for cash transactions.");
        }
    }

    receipt.append("<html><body>")
           .append("<h2>Payment Receipt</h2>")
           .append("<p>Client ID: ").append(clientID).append("</p>")
           .append("<p>Meter ID: ").append(meterID).append("</p>")
           .append("<p>Amount Due: ").append(String.format("%.2f", amountDue)).append("</p>")
           .append("<p>Payment Amount: ").append(String.format("%.2f", paymentAmount)).append("</p>")
           .append("<p>Payment Method: ").append(paymentMethod).append("</p>");

    // Add change (sukli) if applicable
    if ("Cash".equalsIgnoreCase(paymentMethod)) {
        receipt.append("<p>Change: ").append(String.format("%.2f", change)).append("</p>");
    }

    receipt.append("<p>Date: ").append(new java.util.Date()).append("</p>")
           .append("<p>Status: ").append("Paid").append("</p>")
           .append("</body></html>");

    return receipt.toString();
}

    
    public void loadMeterReadings(int clientID) {
        dateBulk.setText("Date Today: " + LocalDate.now().toString());

        timer = new Timer(1000, event -> {
            double[] readings = client.getMeterReadings(clientID);
            prevMain.setText("Previous Reading: " + readings[0]);
            currentMain.setText("Current Reading: " + readings[1]); 
            client.updateMainMeterReading(meterID);
        });
        timer.start();

        
    }
    
    private void addNewMeter(String meterName) {
        client.addSubmeter(meterID, meterName); 
        loadMeterList(); 
    }
    
    private void loadMeterList() {
        int clientID = SharedData.clientID;
        meterList.clear(); 
        List<String> meters = client.getSubmetersByMeterID(meterID); 
        for (String meter : meters) {
            meterList.addElement(meter); 
        }
    }
    
    private void startSubmeter(int submeterID) {
        if (submeterTimers.containsKey(submeterID)) {
        JOptionPane.showMessageDialog(this, "This submeter is already running!", "Info", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    Timer timer = new Timer(1000, event -> {
        double[] readings = client.getSubmeterReadings(submeterID);
        readings[1] += 0.5;
        client.updateSubCurrentReading(submeterID, readings[1]); 

        client.updateMainMeterReading(meterID);

        if (submeterList.getSelectedValue() != null && 
            client.getSubmeterIDByName(meterID, submeterList.getSelectedValue()) == submeterID) {
            currentSub.setText("Current Reading: " + String.format("%.2f", readings[1])); // Format to 2 decimal places
        }
    });

    timer.start();
    submeterTimers.put(submeterID, timer); 
    submeterStates.put(submeterID, true); 
    switchCom.setText("Stop Meter");
    }

    private void stopSubmeter(int submeterID) {
        Timer timer = submeterTimers.get(submeterID); 
        if (timer != null) {
            timer.stop();
            submeterTimers.remove(submeterID); 
            submeterStates.put(submeterID, false); 
            switchCom.setText("Start Meter");
        }
    }

        private void displayPaymentHistory() {
        int clientID = SharedData.clientID;
        List<Object[]> paymentHistoryList = client.getPaymentHistory(clientID);

        // Column names for the table
        String[] columnNames = {"Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"};

        // Convert List<Object[]> to 2D array for the table
        Object[][] data = new Object[paymentHistoryList.size()][6];

        for (int i = 0; i < paymentHistoryList.size(); i++) {
            data[i] = paymentHistoryList.get(i);  // Directly assign each row's data
        }

        // Set the table model with data and column names
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        history.setModel(model);
    }

    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientBulk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientBulk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientBulk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientBulk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientBulk().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BulkPane;
    private javax.swing.JButton addSubmeter;
    private javax.swing.JLabel billBulk;
    private javax.swing.JLabel currentMain;
    private javax.swing.JLabel currentSub;
    private javax.swing.JLabel dateBulk;
    private javax.swing.JTable history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel mainMeterLabel;
    private javax.swing.JButton paybuttonBulk;
    private javax.swing.JTextField paymentField;
    private javax.swing.JComboBox<String> paymethodBulk;
    private javax.swing.JLabel prevMain;
    private javax.swing.JScrollPane scrollList;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JList<String> submeterList;
    private javax.swing.JTextField submeterNameField;
    private javax.swing.JLabel submetername;
    private javax.swing.JToggleButton switchCom;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel welcomeBulk;
    // End of variables declaration//GEN-END:variables
}
