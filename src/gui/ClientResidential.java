/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;
import java.text.DecimalFormat;
import javax.swing.*;
import javax.swing.JOptionPane;
import queries.Client;
import queries.UserState;
import queries.SharedData;
import java.time.LocalDate;
import java.util.List;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Rica Mae
 */
public class ClientResidential extends javax.swing.JFrame {
    Client client = new Client();
    private static String meterType = "";
    private boolean isMeterRunning = false; 
    private Timer timer;  
    private int meterID = SharedData.meterID; 

    private int loggedInUserID = UserState.verifiedID;
  
 
    public ClientResidential() {
        if (!UserState.isVerified) {
            JOptionPane.showMessageDialog(this, "You must log in first!", "Login Required", JOptionPane.WARNING_MESSAGE);
            dispose();
            return;
        }

        meterType = client.getMeterType(SharedData.clientID);
        meterID = client.getMeterID(SharedData.clientID);
        
        initComponents();
        loadMeterReadings(loggedInUserID);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        sidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutClient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        ResidentialPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        switchButton = new javax.swing.JToggleButton();
        residentialUsage = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        payButton = new javax.swing.JButton();
        paymentField = new javax.swing.JTextField();
        paymentMethod = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateTodayLabel = new javax.swing.JLabel();
        currentReadingLabel = new javax.swing.JLabel();
        previousReadingLabel = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        residentialBill = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        history = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sidePanel.setBackground(new java.awt.Color(0, 153, 153));
        sidePanel.setForeground(new java.awt.Color(0, 153, 153));
        sidePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel1.setText("<html>       CLIENT \nDASHBOARD");
        jLabel1.setToolTipText("");
        sidePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 17, 131, 44));

        logoutClient.setText("LOG OUT");
        logoutClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutClientActionPerformed(evt);
            }
        });
        sidePanel.add(logoutClient, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 572, -1, 31));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (2).png"))); // NOI18N
        jLabel3.setText("jLabel3");
        sidePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 560));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (2).png"))); // NOI18N
        jLabel4.setText("jLabel4");
        sidePanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 150, 100));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        ResidentialPanel.setBackground(new java.awt.Color(0, 204, 204));
        ResidentialPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeLabel.setBackground(new java.awt.Color(204, 204, 204));
        welcomeLabel.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLabel.setText("WELCOME ");
        ResidentialPanel.add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 423, 59));

        switchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        switchButton.setText("METER SWITCH");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });
        ResidentialPanel.add(switchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(551, 84, 128, 32));

        residentialUsage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        residentialUsage.setText("METER USAGE");
        ResidentialPanel.add(residentialUsage, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 84, 339, -1));
        ResidentialPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 261, 715, 12));

        payButton.setText("PAY BILL");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });
        ResidentialPanel.add(payButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 470, 121, 44));

        paymentField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentFieldActionPerformed(evt);
            }
        });
        ResidentialPanel.add(paymentField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 326, 207, 40));

        paymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Gcash", "Paymaya" }));
        paymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentMethodActionPerformed(evt);
            }
        });
        ResidentialPanel.add(paymentMethod, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 207, 39));

        jLabel5.setText("INPUT PAYMENT");
        ResidentialPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(411, 298, 98, -1));

        jLabel6.setText("SELECT PAYMENT METHOD");
        ResidentialPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(411, 378, 199, -1));

        dateTodayLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateTodayLabel.setText("Date Today");
        ResidentialPanel.add(dateTodayLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 122, 199, 22));

        currentReadingLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentReadingLabel.setText("Current Reading");
        ResidentialPanel.add(currentReadingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 196, 199, 32));

        previousReadingLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        previousReadingLabel.setText("Previous Reading");
        ResidentialPanel.add(previousReadingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 156, 199, 28));

        refresh.setText("REFRESH BILL");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        ResidentialPanel.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 291, -1, -1));

        residentialBill.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        residentialBill.setText("VIEW BILL");
        jScrollPane3.setViewportView(residentialBill);

        ResidentialPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 326, 278, 249));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        jLabel7.setText("jLabel7");
        ResidentialPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 550));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        jLabel8.setText("jLabel8");
        ResidentialPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 740, 80));

        tabbedPane.addTab("RESIDENTIAL", ResidentialPanel);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Serif", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 153));
        jLabel2.setText("PAYMENT HISTORY");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 16, 500, 62));

        history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"
            }
        ));
        jScrollPane1.setViewportView(history);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 662, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        jLabel9.setText("jLabel9");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 740, 580));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        jLabel10.setText("jLabel10");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 556, 740, 70));

        tabbedPane.addTab("PAYMENT HISTORY", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabbedPane)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        int clientID = SharedData.clientID; 
        String clientName = client.getClientName(clientID);
        
        welcomeLabel.setText("Welcome, " + clientName + "!");
        
        String billDetails = client.loadBillDetails(clientID);
        
        residentialBill.setText(billDetails);
        displayPaymentHistory();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void logoutClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutClientActionPerformed
        SharedData.clientID = 0;
        UserState.verifiedID = -1;
        UserState.isVerified = false;
        
        ClientSignIn clientsn = new ClientSignIn();
            clientsn.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_logoutClientActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        // TODO add your handling code here:
        if (!isMeterRunning) {
            startMeter();
        } else {
            stopMeter();
        }
        
        int clientID = SharedData.clientID;
        String status = client.fetchClientStatus(clientID);
        if(status.equalsIgnoreCase("INACTIVE")){
            switchButton.setEnabled(false);
            residentialUsage.setText("You are inactive, you can't open your meter.");
        }
    }//GEN-LAST:event_switchButtonActionPerformed

    private void paymentFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentFieldActionPerformed
        // TODO add your handling code here:
        validatePaymentInput();
    }//GEN-LAST:event_paymentFieldActionPerformed

    private void paymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentMethodActionPerformed
        // TODO add your handling code here:
        validatePaymentInput();
    }//GEN-LAST:event_paymentMethodActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
        int clientID = SharedData.clientID; 
        String clientName = client.getClientName(clientID);
        processPayment();
        String billDetails = client.loadBillDetails(clientID);
        residentialBill.setText(billDetails);
    }//GEN-LAST:event_payButtonActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        int clientID = SharedData.clientID; 
        String billDetails = client.loadBillDetails(clientID);
        residentialBill.setText(billDetails);
    }//GEN-LAST:event_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    public void loadMeterReadings(int clientID) {
        double[] readings = client.getMeterReadings(clientID);
        dateTodayLabel.setText("Date Today: " + LocalDate.now().toString());
        previousReadingLabel.setText("Previous Reading: " + readings[0]);
        currentReadingLabel.setText("Current Reading: " + readings[1]);
    }

    private void startMeter() {
    isMeterRunning = true;
        switchButton.setText("Stop Meter");

        meterID = client.getMeterID(loggedInUserID);

        DecimalFormat decimalFormat = new DecimalFormat("#.##");

        timer = new Timer(1000, event -> {
            double[] readings = client.getMeterReadings(meterID);
            readings[1] += 0.1; 

            readings[1] = Double.parseDouble(decimalFormat.format(readings[1]));

            client.updateCurrentReading(meterID, readings[1]);

            currentReadingLabel.setText("Current Reading: " + readings[1]);
        });
        timer.start();
    }

    private void stopMeter() {
        isMeterRunning = false;
        switchButton.setText("Start Meter");
        if (timer != null) {
            timer.stop();
        }
    }
    
private void processPayment() {
    String paymentText = paymentField.getText().trim();
    String selectedMethod = (String) paymentMethod.getSelectedItem();
    double paymentAmount;

    try {
        paymentAmount = Double.parseDouble(paymentText);

        int clientID = SharedData.clientID;
        double amountDue = client.getAmountDue(clientID); 
        double leakCharge = client.getLeakCharge(clientID); 
        double overdueCharge = client.getOverdueCharge(clientID); 
        double meterUsed = client.getMeterUsed(meterID); 

        if (client.hasOutstandingBill(clientID)) {
            if (client.isPaymentSufficient(clientID, paymentAmount)) {

                client.insertPaymentIntoHistory(clientID, meterID, amountDue, selectedMethod, meterUsed);

                client.removeBill(clientID);

                StringBuilder receipt = new StringBuilder();
                receipt.append("Receipt\n");
                receipt.append("---------------------------\n");
                receipt.append("Client ID: ").append(clientID).append("\n");
                receipt.append("Meter ID: ").append(meterID).append("\n");
                receipt.append("Payment Method: ").append(selectedMethod).append("\n");
                receipt.append("Amount Due: ").append(String.format("%.2f", amountDue)).append(" pesos\n");
                receipt.append("Meter Used: ").append(String.format("%.2f", meterUsed)).append(" cubic meters\n");
                receipt.append("---------------------------\n");
                receipt.append("Breakdown of Charges:\n");
                receipt.append("  - Leak Charge: ").append(String.format("%.2f", leakCharge)).append(" pesos\n");
                receipt.append("  - Overdue Charge: ").append(String.format("%.2f", overdueCharge)).append(" pesos\n");
                receipt.append("---------------------------\n");
                receipt.append("Payment Amount: ").append(String.format("%.2f", paymentAmount)).append(" pesos\n");

                if ("Cash".equalsIgnoreCase(selectedMethod)) {
                    double change = paymentAmount - amountDue;
                    receipt.append("Change: ").append(String.format("%.2f", change)).append(" pesos\n");
                }

                JOptionPane.showMessageDialog(this, receipt.toString(), "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);

                paymentField.setText("");
                paymentMethod.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(this, "Payment amount is insufficient.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No outstanding bill to pay.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid payment amount.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void validatePaymentInput() {
        String paymentText = paymentField.getText().trim();
        String selectedMethod = (String) paymentMethod.getSelectedItem();
        payButton.setEnabled(!paymentText.isEmpty() && !selectedMethod.equals("Select Payment Method"));
    }
    
    private void displayPaymentHistory() {
        int clientID = SharedData.clientID;
        List<Object[]> paymentHistoryList = client.getPaymentHistory(clientID);

        String[] columnNames = {"Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"};

        Object[][] data = new Object[paymentHistoryList.size()][6];

        for (int i = 0; i < paymentHistoryList.size(); i++) {
            data[i] = paymentHistoryList.get(i); 
        }

        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        history.setModel(model);
    }



    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientResidential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // Make sure the UserState is verified before proceeding to the ClientDashboard
                if (UserState.isVerified) {
                    new ClientResidential().setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Please log in first.", "Login Required", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ResidentialPanel;
    private javax.swing.JLabel currentReadingLabel;
    private javax.swing.JLabel dateTodayLabel;
    private javax.swing.JTable history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logoutClient;
    private javax.swing.JButton payButton;
    private javax.swing.JTextField paymentField;
    private javax.swing.JComboBox<String> paymentMethod;
    private javax.swing.JLabel previousReadingLabel;
    private javax.swing.JButton refresh;
    protected javax.swing.JLabel residentialBill;
    private javax.swing.JLabel residentialUsage;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JToggleButton switchButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
