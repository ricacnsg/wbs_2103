/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import javax.swing.*;
import javax.swing.JOptionPane;
import queries.Client;
import queries.UserState;
import queries.SharedData;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Rica Mae
 */
public class ClientCommercial extends javax.swing.JFrame {
    Client client = new Client();
    private static String meterType = "";
    private boolean isMeterRunning = false; 
    private Timer timer;  
    private int meterID;
    private DefaultListModel<String> meterList;
    private Map<Integer, Timer> meterTimers = new HashMap<>();
    //private int loggedInUserID = UserState.verifiedID;

    /**
     * Creates new form ClientCommercial
     */
    public ClientCommercial() {
        if (!UserState.isVerified) {
            JOptionPane.showMessageDialog(this, "You must log in first!", "Login Required", JOptionPane.WARNING_MESSAGE);
            this.dispose();
            return;
        }
        
        meterType = client.getMeterType(SharedData.clientID);
        meterID = client.getMeterID(SharedData.clientID);
        
        meterList = new DefaultListModel<>();
        loadMeterList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        paymethodCom = new javax.swing.JPanel();
        welcomeCommercial = new javax.swing.JLabel();
        meterNameCom = new javax.swing.JTextField();
        addmeterCom = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comUsage = new javax.swing.JLabel();
        dateCom = new javax.swing.JLabel();
        prevCom = new javax.swing.JLabel();
        currentCom = new javax.swing.JLabel();
        switchCom = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        meterName = new javax.swing.JLabel();
        scrollList = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCom = new javax.swing.JList<>();
        paybutton = new javax.swing.JButton();
        paymentCom = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        selectpaymentMethod = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        billCom = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        history = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        sidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutClient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        paymethodCom.setBackground(new java.awt.Color(0, 204, 204));
        paymethodCom.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeCommercial.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        welcomeCommercial.setForeground(new java.awt.Color(255, 255, 255));
        welcomeCommercial.setText("WELCOME");
        paymethodCom.add(welcomeCommercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 437, 67));
        paymethodCom.add(meterNameCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(553, 125, 143, 31));

        addmeterCom.setText("ADD METER");
        addmeterCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addmeterComActionPerformed(evt);
            }
        });
        paymethodCom.add(addmeterCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 174, -1, 34));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Meter Name");
        paymethodCom.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(553, 103, 100, -1));

        comUsage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        comUsage.setForeground(new java.awt.Color(255, 255, 255));
        comUsage.setText("METER USAGE");
        paymethodCom.add(comUsage, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 79, 98, -1));

        dateCom.setText("Date Today: ");
        paymethodCom.add(dateCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 107, 146, 24));

        prevCom.setText("Previous Reading:");
        paymethodCom.add(prevCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 163, 146, 25));

        currentCom.setText("Current Reading:");
        paymethodCom.add(currentCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 194, 146, 25));

        switchCom.setText("Start Meter");
        switchCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchComActionPerformed(evt);
            }
        });
        paymethodCom.add(switchCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 231, -1, -1));
        switchCom.setEnabled(false);
        paymethodCom.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 272, 693, 15));

        meterName.setText("Meter Name:");
        paymethodCom.add(meterName, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 137, 146, 20));

        listCom.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        listCom.setModel(meterList);
        listCom.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listComValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listCom);

        scrollList.setViewportView(jScrollPane1);

        paymethodCom.add(scrollList, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 85, 111, 160));

        paybutton.setText("PAY BILL");
        paybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paybuttonActionPerformed(evt);
            }
        });
        paymethodCom.add(paybutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(503, 506, 98, 39));
        paymethodCom.add(paymentCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 370, 155, 30));

        jLabel5.setText("INPUT PAYMENT");
        paymethodCom.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 348, 117, -1));

        jLabel6.setText("PAYMENT METHOD");
        paymethodCom.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 406, 108, -1));

        selectpaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Gcash", "Paymaya" }));
        paymethodCom.add(selectpaymentMethod, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 440, 153, 34));

        billCom.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        billCom.setText("VIEW BILL");
        jScrollPane3.setViewportView(billCom);

        paymethodCom.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 305, 240, 248));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        jLabel8.setText("jLabel8");
        paymethodCom.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 320));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        paymethodCom.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 740, 280));

        tabbedPane.addTab("COMMERCIAL", paymethodCom);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Serif", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 153));
        jLabel4.setText("PAYMENT HISTORY");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 22, 550, 62));

        history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"
            }
        ));
        jScrollPane4.setViewportView(history);

        jScrollPane2.setViewportView(jScrollPane4);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 102, 674, 417));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (2).png"))); // NOI18N
        jLabel10.setText("jLabel10");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 740, 560));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1).png"))); // NOI18N
        jLabel11.setText("jLabel11");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 740, 60));

        tabbedPane.addTab("PAYMENT HISTORY", jPanel1);

        sidePanel.setBackground(new java.awt.Color(0, 153, 153));
        sidePanel.setForeground(new java.awt.Color(0, 153, 153));
        sidePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("CLIENT DASHBOARD");
        sidePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 17, 131, 44));

        logoutClient.setText("LOG OUT");
        logoutClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutClientActionPerformed(evt);
            }
        });
        sidePanel.add(logoutClient, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 544, -1, 31));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1) (1).png"))); // NOI18N
        sidePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 560));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wbs_2103/src/icons/website design (1).png"))); // NOI18N
        sidePanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 150, 70));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbedPane))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addmeterComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addmeterComActionPerformed
        String meterName = meterNameCom.getText().trim();
        if (meterName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a meter name.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
                addNewMeter(meterName); 
                meterNameCom.setText(""); 
            }

        loadMeterList();
    }//GEN-LAST:event_addmeterComActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        int clientID = SharedData.clientID;
        String clientName = client.getClientName(clientID);

        welcomeCommercial.setText("Welcome, " + clientName + "!");
        displayPaymentHistory();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void logoutClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutClientActionPerformed
        SharedData.clientID = 0;
        UserState.verifiedID = -1;
        UserState.isVerified = false;

        ClientSignIn clientsn = new ClientSignIn();
        clientsn.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutClientActionPerformed

    private void listComValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listComValueChanged
if (!evt.getValueIsAdjusting()) { 
        String selectedMeterName = listCom.getSelectedValue();
        if (selectedMeterName != null) {
            int clientID = SharedData.clientID;
            int meterID = client.getMeterIDByMeterName(clientID, selectedMeterName);

            if (meterID > 0) { 
                double[] readings = client.getMeterReadings(meterID);
                dateCom.setText("Date Today: " + LocalDate.now().toString());
                meterName.setText("Meter Name: " + selectedMeterName);
                prevCom.setText("Previous Reading: " + readings[0]);
                currentCom.setText("Current Reading: " + readings[1]);
                
                // Fetch and set the bill details
                String billDetails = client.loadComBillDetails(clientID, meterID);
                billCom.setText("<html>" + billDetails + "</html>"); // Ensure HTML tags are used properly

                // Update the switchCom button text
                if (meterTimers.containsKey(meterID)) {
                    switchCom.setText("Stop Meter");
                } else {
                    switchCom.setText("Start Meter");
                }
                switchCom.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Meter ID not found for selected meter name.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_listComValueChanged

    private void switchComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchComActionPerformed
        int clientID = SharedData.clientID;
        String status = client.fetchClientStatus(clientID);
        if(status.equalsIgnoreCase("INACTIVE")){
            switchCom.setEnabled(false);
            comUsage.setText("You are inactive, you can't open your meter.");
        }
        if (listCom.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "Please select a meter first!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }

        String selectedMeter = listCom.getSelectedValue();
        int selectedMeterID = client.getMeterIDByMeterName(SharedData.clientID, selectedMeter);

        if (selectedMeterID <= 0) {
            JOptionPane.showMessageDialog(this, "Error retrieving meter ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (meterTimers.containsKey(selectedMeterID)) { 
            stopMeter(selectedMeterID);
            switchCom.setText("Start Meter");
            JOptionPane.showMessageDialog(this, "Meter stopped!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {

            startMeter(selectedMeterID);
            switchCom.setText("Stop Meter");
            JOptionPane.showMessageDialog(this, "Meter started!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_switchComActionPerformed

    private void paybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paybuttonActionPerformed
        String paymentText = paymentCom.getText().trim();
        if (paymentText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a payment amount.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double paymentAmount;
        try {
            paymentAmount = Double.parseDouble(paymentText);
            if (paymentAmount <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid payment amount.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String paymentMethod = (String) selectpaymentMethod.getSelectedItem();
        if (paymentMethod == null || paymentMethod.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a payment method.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedMeterName = listCom.getSelectedValue();
        if (selectedMeterName == null) {
            JOptionPane.showMessageDialog(this, "Please select a meter first!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int meterID = client.getMeterIDByMeterName(SharedData.clientID, selectedMeterName);
        if (meterID <= 0) {
            JOptionPane.showMessageDialog(this, "Invalid meter selected. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            boolean paymentSuccess = processPayment(SharedData.clientID, meterID, paymentAmount, paymentMethod);

            if (paymentSuccess) {
                JOptionPane.showMessageDialog(this, "Payment successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                paymentCom.setText(""); 
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Payment failed. Possible reasons:\n- Insufficient payment\n- No outstanding bill.\nPlease check and try again.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + e.getMessage(), 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_paybuttonActionPerformed

    /**
     * @param args the command line arguments
     */

    private void loadMeterList() {
        int clientID = SharedData.clientID;
        meterList.clear(); 
        List<String> meters = client.getMetersByClientID(clientID); 
        for (String meter : meters) {
            meterList.addElement(meter); 
        }
    }

    private void addNewMeter(String meterName) {
        int clientID = SharedData.clientID;
        client.addMeter(clientID, meterName, meterType); 
        loadMeterList(); 
    }
    
private void startMeter(int meterID) {
       if (meterTimers.containsKey(meterID)) {
        JOptionPane.showMessageDialog(this, "This meter is already running!", "Info", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    Timer timer = new Timer(1000, event -> {
        double[] readings = client.getMeterReadings(meterID);
        readings[1] += 0.5; 
        client.updateCurrentReading(meterID, readings[1]); 

        if (listCom.getSelectedValue() != null && client.getMeterIDByMeterName(SharedData.clientID, listCom.getSelectedValue()) == meterID) {
            String formattedReading = String.format("%.2f", readings[1]);
            currentCom.setText("Current Reading: " + formattedReading);
        }
    });
    timer.start();
    meterTimers.put(meterID, timer); 
}


private void stopMeter(int meterID) {
    Timer timer = meterTimers.get(meterID);
    if (timer != null) {
        timer.stop();
        meterTimers.remove(meterID); 
    }
}

private boolean processPayment(int clientID, int meterID, double paymentAmount, String selectedMethod) {
    if (client.hasOutstandingBill(clientID, meterID)) {
        double amountDue = client.getAmountDue(clientID, meterID);
        double leakCharge = client.getLeakCharge(clientID, meterID); 
        double overdueCharge = client.getOverdueCharge(clientID, meterID); 
        double totalCharges = leakCharge + overdueCharge;
        double meterUsed = client.getMeterUsed(meterID); 

        if (paymentAmount >= amountDue) {
            client.insertPaymentIntoHistory(clientID, meterID, amountDue, selectedMethod, meterUsed);
            client.removeBill(clientID, meterID);

            StringBuilder receipt = new StringBuilder();
            receipt.append("<html>");
            receipt.append("<h2>Payment Receipt</h2>");
            receipt.append("<hr>");
            receipt.append("<b>Client ID:</b> ").append(clientID).append("<br>");
            receipt.append("<b>Meter ID:</b> ").append(meterID).append("<br>");
            receipt.append("<b>Payment Method:</b> ").append(selectedMethod).append("<br>");
            receipt.append("<b>Amount Due:</b> ").append(String.format("%.2f", amountDue)).append(" pesos<br>");
            receipt.append("<b>Payment Amount:</b> ").append(String.format("%.2f", paymentAmount)).append(" pesos<br>");
            receipt.append("<hr>");
            receipt.append("<b>Breakdown of Charges:</b><br>");
            receipt.append("  - Leak Charge: ").append(String.format("%.2f", leakCharge)).append(" pesos<br>");
            receipt.append("  - Overdue Charge: ").append(String.format("%.2f", overdueCharge)).append(" pesos<br>");
            receipt.append("  - Total Charges: ").append(String.format("%.2f", totalCharges)).append(" pesos<br>");
            receipt.append("<hr>");
            receipt.append("<b>Meter Used:</b> ").append(String.format("%.2f", meterUsed)).append(" cubic meters<br>");

            if ("Cash".equalsIgnoreCase(selectedMethod)) {
                double change = paymentAmount - amountDue;
                receipt.append("<b>Change:</b> ").append(String.format("%.2f", change)).append(" pesos<br>");
            }

            receipt.append("</html>");

            JOptionPane.showMessageDialog(this, receipt.toString(), "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } else {
            JOptionPane.showMessageDialog(this, 
                "Payment amount is insufficient. Amount due: " + String.format("%.2f", amountDue) + " pesos", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } else {
        JOptionPane.showMessageDialog(this, "No outstanding bill to pay.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
}


    private void displayPaymentHistory() {
        int clientID = SharedData.clientID;
        List<Object[]> paymentHistoryList = client.getPaymentHistory(clientID);

        String[] columnNames = {"Payment ID", "Amount Paid", "Payment Method", "Meter Used", "Charges", "Payment Date"};

        Object[][] data = new Object[paymentHistoryList.size()][6];

        for (int i = 0; i < paymentHistoryList.size(); i++) {
            data[i] = paymentHistoryList.get(i);  
        }

        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        history.setModel(model);
    }







    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientCommercial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientCommercial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientCommercial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientCommercial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientCommercial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addmeterCom;
    protected javax.swing.JLabel billCom;
    private javax.swing.JLabel comUsage;
    private javax.swing.JLabel currentCom;
    private javax.swing.JLabel dateCom;
    private javax.swing.JTable history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList<String> listCom;
    private javax.swing.JButton logoutClient;
    private javax.swing.JLabel meterName;
    private javax.swing.JTextField meterNameCom;
    private javax.swing.JButton paybutton;
    private javax.swing.JTextField paymentCom;
    private javax.swing.JPanel paymethodCom;
    private javax.swing.JLabel prevCom;
    private javax.swing.JScrollPane scrollList;
    private javax.swing.JComboBox<String> selectpaymentMethod;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JToggleButton switchCom;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel welcomeCommercial;
    // End of variables declaration//GEN-END:variables
}
